{"version":3,"sources":["StaticPin.tsx"],"names":["React","Animated","View","Image","StyleSheet","StaticPin","staticPinPosition","pinAnim","staticPinIcon","pinSize","setPinSize","transform","translateY","height","translateX","width","getTranslateTransform","opacity","left","x","top","y","styles","pinWrapper","nativeEvent","layout","require","pin","create","position"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,cAAlD;AAGA,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBC,EAAAA,iBADwB;AAExBC,EAAAA,OAFwB;AAGxBC,EAAAA,aAHwB;AAIxBC,EAAAA,OAJwB;AAKxBC,EAAAA;AALwB,CAAD,KAYnB;AACJ,QAAMC,SAAS,GAAG,CAChB;AAAEC,IAAAA,UAAU,EAAE,CAACH,OAAO,CAACI;AAAvB,GADgB,EAEhB;AAAEC,IAAAA,UAAU,EAAE,CAACL,OAAO,CAACM,KAAT,GAAiB;AAA/B,GAFgB,EAGhB,GAAGR,OAAO,CAACS,qBAAR,EAHa,CAAlB;AAMA,QAAMC,OAAO,GAAGR,OAAO,CAACM,KAAR,IAAiBN,OAAO,CAACI,MAAzB,GAAkC,CAAlC,GAAsC,CAAtD;AAEA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLP,iBAAiB,IAAI;AACnBY,MAAAA,IAAI,EAAEZ,iBAAiB,CAACa,CADL;AAEnBC,MAAAA,GAAG,EAAEd,iBAAiB,CAACe;AAFJ,KADhB,EAKLC,MAAM,CAACC,UALF,EAML;AAAEN,MAAAA,OAAF;AAAWN,MAAAA;AAAX,KANK;AAFT,kBAWE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,CAAC;AAAEa,MAAAA,WAAW,EAAE;AAAEC,QAAAA;AAAF;AAAf,KAAD,KAAiCf,UAAU,CAACe,MAAD;AAA3D,KACGjB,aAAa,iBACZ,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEkB,OAAO,CAAC,mBAAD,CAAtB;AAA6C,IAAA,KAAK,EAAEJ,MAAM,CAACK;AAA3D,IAFJ,CAXF,CADF;AAmBD,CAxCM;AA0CP,MAAML,MAAM,GAAGlB,UAAU,CAACwB,MAAX,CAAkB;AAC/BL,EAAAA,UAAU,EAAE;AACVM,IAAAA,QAAQ,EAAE;AADA,GADmB;AAI/BF,EAAAA,GAAG,EAAE;AACHZ,IAAAA,KAAK,EAAE,EADJ;AAEHF,IAAAA,MAAM,EAAE;AAFL;AAJ0B,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Animated, View, Image, StyleSheet } from 'react-native';\nimport { Size2D } from 'src/typings';\n\nexport const StaticPin = ({\n  staticPinPosition,\n  pinAnim,\n  staticPinIcon,\n  pinSize,\n  setPinSize,\n}: {\n  staticPinPosition: { x: number; y: number };\n  pinAnim: Animated.ValueXY;\n  staticPinIcon: React.ReactNode;\n  pinSize: Size2D;\n  setPinSize: (size: Size2D) => void;\n}) => {\n  const transform = [\n    { translateY: -pinSize.height },\n    { translateX: -pinSize.width / 2 },\n    ...pinAnim.getTranslateTransform(),\n  ];\n\n  const opacity = pinSize.width && pinSize.height ? 1 : 0;\n\n  return (\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        staticPinPosition && {\n          left: staticPinPosition.x,\n          top: staticPinPosition.y,\n        },\n        styles.pinWrapper,\n        { opacity, transform },\n      ]}\n    >\n      <View onLayout={({ nativeEvent: { layout } }) => setPinSize(layout)}>\n        {staticPinIcon || (\n          <Image source={require('../assets/pin.png')} style={styles.pin} />\n        )}\n      </View>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  pinWrapper: {\n    position: 'absolute',\n  },\n  pin: {\n    width: 48,\n    height: 64,\n  },\n});\n"]}